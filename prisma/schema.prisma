// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model UserStatus {
  id     Int    @id @default(autoincrement())
  status String @unique
  users  User[]
}

model User {
  id               Int             @id @default(autoincrement())
  name             String          @db.VarChar(255)
  email            String          @unique
  password         String
  phoneNumber      String          @db.VarChar(20)
  identityNumber   String          @db.VarChar(16)
  identityCard     String
  accountNumber    String          @unique @db.VarChar(50)
  roleId           Int
  role             Role            @relation(fields: [roleId], references: [id])
  lender           Lender?
  borrower         Borrower?
  statusId         Int             @default(1)
  status           UserStatus      @relation(fields: [statusId], references: [id])
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  FundingRequest   FundingRequest? @relation(fields: [fundingRequestId], references: [id])
  fundingRequestId Int?
}

model Lender {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  birthDate DateTime
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Borrower {
  id             Int             @id @default(autoincrement())
  userId         Int             @unique
  user           User            @relation(fields: [userId], references: [id])
  address        String
  npwp           String          @unique @db.VarChar(16)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  FundingRequest FundingRequest?
}

model Sector {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  FundingRequest FundingRequest[]
}

model FundingRequest {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  user           Borrower @relation(fields: [userId], references: [id])
  title          String   @db.VarChar(255)
  name           String   @db.VarChar(255)
  description    String
  image          String
  totalFund      Int
  tenor          Int
  returnRate     Float
  fundingExpired DateTime
  sectorId       Int
  sector         Sector   @relation(fields: [sectorId], references: [id])
  User           User[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
